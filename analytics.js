// –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞
class Analytics {
    constructor() {
        this.apiKey = 'demo-key'; // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª—é—á
        this.endpoint = 'https://api.example.com/analytics'; // –ó–∞–≥–ª—É—à–∫–∞
        this.localData = this.loadLocalData();
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    trackUser(userName) {
        const data = {
            event: 'user_registered',
            userName: userName,
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            language: navigator.language
        };
        
        this.sendData(data);
        this.saveLocalData(data);
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏
    trackMood(userName, mood, emotions) {
        const data = {
            event: 'mood_recorded',
            userName: userName,
            mood: mood,
            emotions: emotions,
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            language: navigator.language
        };
        
        this.sendData(data);
        this.saveLocalData(data);
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    sendData(data) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        console.log('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:', data);
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        if (navigator.sendBeacon) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendBeacon –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            const blob = new Blob([JSON.stringify(data)], {
                type: 'application/json'
            });
            navigator.sendBeacon(this.endpoint, blob);
        } else {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            fetch(this.endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            }).catch(error => {
                console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
            });
        }
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    saveLocalData(data) {
        this.localData.push(data);
        localStorage.setItem('moodTrackerAnalytics', JSON.stringify(this.localData));
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    loadLocalData() {
        try {
            return JSON.parse(localStorage.getItem('moodTrackerAnalytics') || '[]');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
            return [];
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    getStats() {
        const users = new Set();
        const moods = { happy: 0, neutral: 0, sad: 0 };
        const emotions = {};
        
        this.localData.forEach(record => {
            if (record.event === 'user_registered') {
                users.add(record.userName);
            } else if (record.event === 'mood_recorded') {
                moods[record.mood]++;
                if (record.emotions) {
                    record.emotions.forEach(emotion => {
                        emotions[emotion] = (emotions[emotion] || 0) + 1;
                    });
                }
            }
        });
        
        return {
            totalUsers: users.size,
            totalRecords: this.localData.filter(r => r.event === 'mood_recorded').length,
            moodStats: moods,
            topEmotions: Object.entries(emotions)
                .sort(([,a], [,b]) => b - a)
                .slice(0, 10)
                .map(([emotion, count]) => ({ emotion, count }))
        };
    }
    
    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    exportData() {
        const dataStr = JSON.stringify(this.localData, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(dataBlob);
        
        const link = document.createElement('a');
        link.href = url;
        link.download = `mood-tracker-analytics-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
window.analytics = new Analytics();
