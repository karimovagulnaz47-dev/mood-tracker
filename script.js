class MoodTracker {
    constructor() {
        this.moodData = this.loadMoodData();
        this.userName = this.loadUserName();
        this.moodEmojis = {
            happy: 'üôÇ',
            neutral: 'üòå',
            sad: 'üòî'
        };
        this.moodTexts = {
            happy: '–°—á–∞—Å—Ç–ª–∏–≤—ã–π',
            neutral: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π',
            sad: '–ì—Ä—É—Å—Ç–Ω—ã–π'
        };
        
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —ç–º–æ—Ü–∏–π
        this.emotions = {
            happy: [
                { id: 'joy', name: '–†–∞–¥–æ—Å—Ç—å', emoji: 'üôÇ' },
                { id: 'excitement', name: '–í–æ—Å—Ç–æ—Ä–≥', emoji: 'üòä' },
                { id: 'gratitude', name: '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å', emoji: 'üôè' },
                { id: 'love', name: '–õ—é–±–æ–≤—å', emoji: 'üíô' },
                { id: 'pride', name: '–ì–æ—Ä–¥–æ—Å—Ç—å', emoji: 'üòå' },
                { id: 'hope', name: '–ù–∞–¥–µ–∂–¥–∞', emoji: '‚ú®' },
                { id: 'amusement', name: '–í–µ—Å–µ–ª—å–µ', emoji: 'üòÑ' },
                { id: 'satisfaction', name: '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ', emoji: 'üòå' }
            ],
            neutral: [
                { id: 'calm', name: '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', emoji: 'üòå' },
                { id: 'boredom', name: '–°–∫—É–∫–∞', emoji: 'üòë' },
                { id: 'confusion', name: '–†–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å', emoji: 'üòï' },
                { id: 'indifference', name: '–†–∞–≤–Ω–æ–¥—É—à–∏–µ', emoji: 'üòê' },
                { id: 'tiredness', name: '–£—Å—Ç–∞–ª–æ—Å—Ç—å', emoji: 'üò¥' },
                { id: 'contemplation', name: '–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ', emoji: 'ü§î' },
                { id: 'patience', name: '–¢–µ—Ä–ø–µ–Ω–∏–µ', emoji: 'üôÇ' },
                { id: 'focus', name: '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ—Å—Ç—å', emoji: 'üßò' }
            ],
            sad: [
                { id: 'sadness', name: '–ì—Ä—É—Å—Ç—å', emoji: 'üòî' },
                { id: 'anxiety', name: '–¢—Ä–µ–≤–æ–≥–∞', emoji: 'üò∞' },
                { id: 'anger', name: '–ó–ª–æ—Å—Ç—å', emoji: 'üò†' },
                { id: 'frustration', name: '–†–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ', emoji: 'üò§' },
                { id: 'loneliness', name: '–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ', emoji: 'üòî' },
                { id: 'fear', name: '–°—Ç—Ä–∞—Ö', emoji: 'üò®' },
                { id: 'guilt', name: '–í–∏–Ω–∞', emoji: 'üòû' },
                { id: 'disappointment', name: '–†–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ', emoji: 'üòï' }
            ]
        };
        
        this.selectedMood = null;
        this.selectedEmotions = [];
        
        this.init();
    }
    
    init() {
        this.setupEventListeners();
        this.setupUserNameHandlers();
        this.updateUserNameDisplay();
        this.updateTodayMood();
        this.renderHistory();
        this.updateDashboard();
    }
    
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        const moodButtons = document.querySelectorAll('.mood-btn');
        moodButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                const mood = e.target.dataset.mood;
                this.selectMood(mood);
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏
        const clearBtn = document.getElementById('clearBtn');
        clearBtn.addEventListener('click', () => {
            this.clearHistory();
        });
    }
    
    setupUserNameHandlers() {
        const saveNameBtn = document.getElementById('saveName');
        const changeNameBtn = document.getElementById('changeName');
        const userNameInput = document.getElementById('userName');
        
        saveNameBtn.addEventListener('click', () => {
            this.saveUserName();
        });
        
        changeNameBtn.addEventListener('click', () => {
            this.showNameInput();
        });
        
        userNameInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.saveUserName();
            }
        });
    }
    
    saveUserName() {
        const userNameInput = document.getElementById('userName');
        const name = userNameInput.value.trim();
        
        if (name.length < 2) {
            alert('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
            return;
        }
        
        this.userName = name;
        this.saveUserNameToStorage();
        this.updateUserNameDisplay();
        this.sendUserData();
    }
    
    showNameInput() {
        document.getElementById('nameInput').style.display = 'flex';
        document.getElementById('welcomeMessage').style.display = 'none';
        document.getElementById('userName').focus();
    }
    
    updateUserNameDisplay() {
        const nameInput = document.getElementById('nameInput');
        const welcomeMessage = document.getElementById('welcomeMessage');
        const displayName = document.getElementById('displayName');
        
        if (this.userName) {
            displayName.textContent = this.userName;
            nameInput.style.display = 'none';
            welcomeMessage.style.display = 'flex';
        } else {
            nameInput.style.display = 'flex';
            welcomeMessage.style.display = 'none';
        }
    }
    
    selectMood(mood) {
        this.selectedMood = mood;
        this.selectedEmotions = [];
        
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.mood-btn').forEach(btn => {
            btn.classList.remove('selected');
        });
        
        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelector(`[data-mood="${mood}"]`).classList.add('selected');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —ç–º–æ—Ü–∏–π
        this.showEmotionsSelector(mood);
    }
    
    showEmotionsSelector(mood) {
        const emotionsSelector = document.getElementById('emotionsSelector');
        const emotionsGrid = document.getElementById('emotionsGrid');
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç–º–æ—Ü–∏–∏
        emotionsGrid.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        this.emotions[mood].forEach(emotion => {
            const button = document.createElement('button');
            button.className = 'emotion-btn';
            button.dataset.emotion = emotion.id;
            button.innerHTML = `
                <div style="font-size: 1.5em; margin-bottom: 5px;">${emotion.emoji}</div>
                <div>${emotion.name}</div>
            `;
            
            button.addEventListener('click', () => {
                this.toggleEmotion(emotion.id, button);
            });
            
            emotionsGrid.appendChild(button);
        });
        
        emotionsSelector.style.display = 'block';
    }
    
    toggleEmotion(emotionId, button) {
        if (this.selectedEmotions.includes(emotionId)) {
            // –£–±–∏—Ä–∞–µ–º —ç–º–æ—Ü–∏—é
            this.selectedEmotions = this.selectedEmotions.filter(id => id !== emotionId);
            button.classList.remove('selected');
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏—é
            this.selectedEmotions.push(emotionId);
            button.classList.add('selected');
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏
        if (this.selectedEmotions.length > 0) {
            this.saveTodayMood();
        }
    }
    
    sendUserData() {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–æ–Ω–∏–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (this.userName && window.analytics) {
            window.analytics.trackUser(this.userName);
        }
    }
    
    sendMoodData(moodData) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏
        if (this.userName && window.analytics) {
            window.analytics.trackMood(this.userName, moodData.mood, moodData.emotions);
        }
    }
    
    
    saveTodayMood() {
        if (!this.selectedMood || this.selectedEmotions.length === 0) return;
        
        const today = this.getTodayString();
        
        const moodData = {
            mood: this.selectedMood,
            emotions: [...this.selectedEmotions],
            timestamp: new Date().toISOString()
        };
        
        this.moodData[today] = moodData;
        
        this.saveMoodData();
        this.updateTodayMood();
        this.renderHistory();
        this.updateDashboard();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        this.sendMoodData(moodData);
    }
    
    updateTodayMood() {
        const today = this.getTodayString();
        const todayMoodElement = document.getElementById('todayMood');
        
        if (this.moodData[today]) {
            const data = this.moodData[today];
            const mood = data.mood;
            const emotions = data.emotions || [];
            
            let emotionsText = '';
            if (emotions.length > 0) {
                const emotionNames = emotions.map(emotionId => {
                    const emotion = this.findEmotionById(emotionId);
                    return emotion ? emotion.name : emotionId;
                });
                emotionsText = `<p><strong>–≠–º–æ—Ü–∏–∏:</strong> ${emotionNames.join(', ')}</p>`;
            }
            
            todayMoodElement.innerHTML = `
                <p>–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</p>
                <div class="selected-mood">${this.moodEmojis[mood]}</div>
                <p>${this.moodTexts[mood]}</p>
                ${emotionsText}
            `;
        } else {
            todayMoodElement.innerHTML = '<p>–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</p>';
        }
    }
    
    findEmotionById(emotionId) {
        for (const mood in this.emotions) {
            const emotion = this.emotions[mood].find(e => e.id === emotionId);
            if (emotion) return emotion;
        }
        return null;
    }
    
    updateDashboard() {
        this.updateMoodStats();
        this.updateTopEmotions();
    }
    
    updateMoodStats() {
        const last30Days = this.getLast30DaysData();
        const totalDays = last30Days.length;
        
        if (totalDays === 0) {
            document.getElementById('happyPercent').textContent = '0%';
            document.getElementById('neutralPercent').textContent = '0%';
            document.getElementById('sadPercent').textContent = '0%';
            return;
        }
        
        const moodCounts = { happy: 0, neutral: 0, sad: 0 };
        
        last30Days.forEach(day => {
            if (this.moodData[day]) {
                moodCounts[this.moodData[day].mood]++;
            }
        });
        
        document.getElementById('happyPercent').textContent = 
            Math.round((moodCounts.happy / totalDays) * 100) + '%';
        document.getElementById('neutralPercent').textContent = 
            Math.round((moodCounts.neutral / totalDays) * 100) + '%';
        document.getElementById('sadPercent').textContent = 
            Math.round((moodCounts.sad / totalDays) * 100) + '%';
    }
    
    updateTopEmotions() {
        const last30Days = this.getLast30DaysData();
        const emotionCounts = {};
        
        last30Days.forEach(day => {
            if (this.moodData[day] && this.moodData[day].emotions) {
                this.moodData[day].emotions.forEach(emotionId => {
                    emotionCounts[emotionId] = (emotionCounts[emotionId] || 0) + 1;
                });
            }
        });
        
        const topEmotions = Object.entries(emotionCounts)
            .sort(([,a], [,b]) => b - a)
            .slice(0, 3);
        
        const topEmotionsElement = document.getElementById('topEmotions');
        
        if (topEmotions.length === 0) {
            topEmotionsElement.innerHTML = '<p class="no-data">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö</p>';
            return;
        }
        
        const topEmotionsHTML = topEmotions.map(([emotionId, count]) => {
            const emotion = this.findEmotionById(emotionId);
            if (!emotion) return '';
            
            return `
                <div class="top-emotion-item">
                    <span class="emotion-name">${emotion.emoji} ${emotion.name}</span>
                    <span class="emotion-count">${count}</span>
                </div>
            `;
        }).join('');
        
        topEmotionsElement.innerHTML = topEmotionsHTML;
    }
    
    getLast30DaysData() {
        const dates = [];
        const today = new Date();
        
        for (let i = 29; i >= 0; i--) {
            const date = new Date(today);
            date.setDate(date.getDate() - i);
            dates.push(date.toISOString().split('T')[0]);
        }
        
        return dates;
    }
    
    renderHistory() {
        const historyList = document.getElementById('historyList');
        const entries = Object.entries(this.moodData);
        
        if (entries.length === 0) {
            historyList.innerHTML = '<p class="no-data">–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π</p>';
            return;
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        entries.sort((a, b) => new Date(b[1].timestamp) - new Date(a[1].timestamp));
        
        const historyHTML = entries.map(([date, data]) => {
            const formattedDate = this.formatDate(date);
            const isToday = date === this.getTodayString();
            
            let emotionsText = '';
            if (data.emotions && data.emotions.length > 0) {
                const emotionNames = data.emotions.map(emotionId => {
                    const emotion = this.findEmotionById(emotionId);
                    return emotion ? emotion.name : emotionId;
                });
                emotionsText = `<div class="emotions-list">${emotionNames.join(', ')}</div>`;
            }
            
            return `
                <div class="history-item ${isToday ? 'today' : ''}">
                    <div class="mood-emoji">${this.moodEmojis[data.mood]}</div>
                    <div class="mood-info">
                        <div class="mood-text">${this.moodTexts[data.mood]}</div>
                        ${emotionsText}
                    </div>
                    <div class="date">${formattedDate}</div>
                </div>
            `;
        }).join('');
        
        historyList.innerHTML = historyHTML;
    }
    
    clearHistory() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π?')) {
            this.moodData = {};
            this.saveMoodData();
            this.updateTodayMood();
            this.renderHistory();
            this.updateDashboard();
            
            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–æ–∫
            document.querySelectorAll('.mood-btn').forEach(btn => {
                btn.classList.remove('selected');
            });
            
            // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —ç–º–æ—Ü–∏–π
            document.getElementById('emotionsSelector').style.display = 'none';
            
            this.selectedMood = null;
            this.selectedEmotions = [];
        }
    }
    
    getTodayString() {
        const today = new Date();
        return today.toISOString().split('T')[0]; // YYYY-MM-DD
    }
    
    formatDate(dateString) {
        const date = new Date(dateString);
        const today = new Date();
        const yesterday = new Date(today);
        yesterday.setDate(yesterday.getDate() - 1);
        
        if (dateString === this.getTodayString()) {
            return '–°–µ–≥–æ–¥–Ω—è';
        } else if (date.toDateString() === yesterday.toDateString()) {
            return '–í—á–µ—Ä–∞';
        } else {
            return date.toLocaleDateString('ru-RU', {
                day: 'numeric',
                month: 'long',
                year: 'numeric'
            });
        }
    }
    
    loadMoodData() {
        try {
            const data = localStorage.getItem('moodTrackerData');
            return data ? JSON.parse(data) : {};
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
            return {};
        }
    }
    
    saveMoodData() {
        try {
            localStorage.setItem('moodTrackerData', JSON.stringify(this.moodData));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
    
    loadUserName() {
        try {
            return localStorage.getItem('moodTrackerUserName') || '';
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–º–µ–Ω–∏:', error);
            return '';
        }
    }
    
    saveUserNameToStorage() {
        try {
            localStorage.setItem('moodTrackerUserName', this.userName);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏:', error);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    new MoodTracker();
});